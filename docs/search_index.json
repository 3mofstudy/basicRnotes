[["進階r--文字處理.html", "Chapter 9 進階R- 文字處理 9.1 內建文字函數(base) 9.2 stringr套件 9.3 正則表達式", " Chapter 9 進階R- 文字處理 在R中，有需多內建的文字處理函數，可以對文字進行搜尋、取代、切割或擷取，除此之外，R在文字處理亦有一個套件 library(stringr)，可以彌補內建函數部分不足之處。 9.1 內建文字函數(base) 1. 大小寫切換 # 全部轉小寫之函數 tolower(&quot;HAPPLY DAY&quot;) ## [1] &quot;happly day&quot; # 全部轉大寫之函數 toupper(&quot;happly day&quot;) ## [1] &quot;HAPPLY DAY&quot; 2. 文字搜尋 # 找出符合條件的向量內位置 grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) # 找出符合條件之邏輯判斷(TRUE FALSE) grepl(pattern, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 3. 文字取代 # 只替换第一次匹配的字串 sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) # 替换所有匹配的字串 gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 4. 使用位址擷取 # 根據起始位址和結束位址，擷取出特定文字 substr(x, start, stop) # 根據起始位址和結束位址，擷取出特定文字，但結束位置可以向量化 substring(x, first, last) 5. 符合條件下之位址搜尋 # 找出符合條件的字串向量的起始位置 regexpr(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) # 找出符合條件的字串向量的起始位置,各自列表化 gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 與gregexpr類似的函數，還有regexec、gregexec，差異不大，只是輸出方式不同，筆者認為以後續處理方便性而言，gregexpr是比較值得學習的函數 9.2 stringr套件 library(stringr) # 首字母轉換成大寫字母 str_to_title(&quot;jack&quot;) #1.字串分割(可割多句) #輸出格式list str_split(string, pattern, n = Inf, simplify = FALSE) #2.字串分割(只割一句) str_split_1(string, pattern) #3.字串分割(指定割出多少詞) #輸出格式matrix str_split_fixed(string, pattern, n) #4.字串分割(指定割出後，輸出第i個字串) #輸出格式matrix str_split_i(string, pattern, i) fool= c(&quot;蘋果and橘子and香蕉and西瓜&quot;,&quot;豬肉and牛肉and雞肉&quot;) str_split_i(fool, &quot;and&quot;,3) #5.比對 (想找包含 西瓜 在內的字串) #類似 grepl str_detect(fool, pattern = &quot;西瓜&quot; ) grepl(&quot;西瓜&quot;, fool) 9.3 正則表達式 正則表達式（Regular Expressions）是一種用來匹配字串模式的工具，正規表達式有 . ^ $ * + ? \\ | []() {} 保留字元。正規表示式從左到右進行計算，並遵循優先順序，這與算術表達式非常類似。相同優先權的從左到右進行運算，不同優先權的運算先高後低，下表為相同優先權等級說明 運算符 說明 \\ 轉義符 ( )、[ ] 圓括號和方括號 *、+、?、{n}、{n,}、{n,m} 量詞限定符 ^、$ 、\\任何元字符 定位點和序位 | 替換、或 常見正則表達式，優先級別由高到低順序如下 優先順序 種類 說明 1 轉義符 \\是用於轉義其他特殊字元的轉義符號。它具有最高的優先權。 範例：\\d、\\. 等，其中 \\d 符合數字，\\. 符合點號。 2 括號 圓括號 () 用於建立子表達式，具有高於其他運算子的優先權。 範例：(abc)+ 符合 “abc” 一次或多次。 3 量詞 量詞指定前面的元素可以重複的次數。 範例：a*符合零個或多個 “a”。 4 字符類 使用方括號 [ ] 表示，用於匹配括號內的任意字元。 範例：[aeiou] 符合任何一個母音字母。 5 斷言 用於檢查字串中特定位置的條件的元素。 範例：^ 表示行的開頭，$ 表示行的結尾。 6 連接 沒有其他運算子的情況下表示字元之間的簡單連接。 範例：abc 匹配 “abc”。 7 管道 表示”或”，用於在多個模式之間選擇一個。 範例：cat|dog 符合 “cat” 或 “dog”。 常見正則表達式用法如下表，可分成五大類 分類 說明 匹配字元 .：匹配任意單個字元（除了換行符）。 \\\\d：匹配任意數字（相當於 [0-9]）。 \\\\D：匹配任意非數字字元。 \\\\w：匹配任意字母、數字或下劃線字元（相當於 [a-zA-Z0-9_]）。 \\\\W：匹配任意非字母、數字或下劃線字元。 \\\\s：匹配任意空白字元（空格、制表符、換行符等）。 \\\\S：匹配任意非空白字元。 匹配量詞 *：匹配前面的元素零次或多次。 +：匹配前面的元素一次或多次。 ?：匹配前面的元素零次或一次。 {n}：匹配前面的元素恰好 n 次。 {n,}：匹配前面的元素至少 n 次。 {n,m}：匹配前面的元素至少 n 次，但不超過 m 次。 錨點 ^：匹配字串的開頭。 $：匹配字串的結尾。 \\\\b：匹配一個單字邊界，指單詞間的空白位置(出現空字串(空白)開始或結束的位置)。 \\\\B：出現非字串開始或結束的位置，和\\\\b相反。 分組 (...)：將模式括起來，作為一個組。 |：表示“或”，例如 a|b 匹配 a 或 b 轉義字符 \\：正規表達式中用\\進行「轉義」，但R本身也用來\\來跳脫字符，所以使用正則表達式搜尋轉義字符時，需要兩個斜線\\\\。 \\\\n：換行符，將游標移到下一行的開頭 \\\\t：製表符，插入一個水平製表符，用於對齊文本(Tab鍵) \\\\r：回車符，將游標移到行首，不移到下一行 \\\\b：退格符 (backspace)，將游標移到前一個字符的位置，但不刪除該字符 \\\\f：換頁符。 \\\\\\：單一反斜線。 \\\\\"：雙引號。 \\\\'：單引號。 stringr套件總共提供30個字串處理函數，其中大部分皆可支援正規表示式應用，包內所有以str_開頭函數，後面單字用來說明該函數意義。 stringr套件中的函數在使用正則表達式時(例如str_detect)，與基本文字搜尋grep函數不同，可以匹配許多萬國字元，搭配[]使用，能夠比對多個特定字元，屬於字元集合，例如比對任意大寫字母可以用[A-Z]，或者[:upper:] ，下列整理 字元集合 說明(搭配萬國字元) 一般用法 [:digit:] 比對任何數字 [0-9] [:lower:] 比對任意小寫字母 [a-z] [:upper:] 比對任意大寫字母 [A-Z] [:alpha:] 比對任意字母 [a-zA-Z] [:alnum:] 比對任意字母和數字 [a-zA-Z0-9] [:blank:] 比對空格和定位字元 [ [:space:] 比對任意空白字元，包含空格、定位字元、換行字元（\\n）、換頁字元（\\f）、Enter字元（\\r) [ \\t\\n\\r\\f] [:punct:] 比對任意標點符號 - [:print:] 比對任意可印刷字元，等同任意字母和數字、標點符號、空白字元 [:cntrl:] 比對任意不可印刷字元，也稱為控制字元 "]]
