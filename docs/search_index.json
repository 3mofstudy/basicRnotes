[["流程控制.html", "Chapter 5 流程控制 5.1 if -else 邏輯判斷 5.2 for 迴圈 5.3 while 迴圈 5.4 repeat 迴圈 5.5 break與next", " Chapter 5 流程控制 5.1 if -else 邏輯判斷 ifelse() ifelse是最簡單的邏輯判斷，寫法類似excel函數if函數，第一參數放判斷句，第二參數放判斷為真(TRUE)，會執行的程式碼，第三參數放判斷為假(FALSE)，會執行的程式碼 num &lt;- c(7,8,10,65,6,8,35,15,25,9,22) ifelse(num&gt;=10,&quot;&gt;=10&quot;,&quot;&lt;10&quot;) ## [1] &quot;&lt;10&quot; &quot;&lt;10&quot; &quot;&gt;=10&quot; &quot;&gt;=10&quot; &quot;&lt;10&quot; &quot;&lt;10&quot; &quot;&gt;=10&quot; &quot;&gt;=10&quot; &quot;&gt;=10&quot; &quot;&lt;10&quot; ## [11] &quot;&gt;=10&quot; if() 或 if()-else() 雖然ifelse很好用，但僅適用於單行邏輯判斷或執行，當預計執行程式碼較為複雜，無法用一行程式碼來執行，就必須考慮 使用if 及 else() if-else敘述使用在邏輯判斷，若需要依條件改變需要執行的程式碼，就會使用if-else，若if後所接邏輯判斷為真(TRUE)，就會執行if下方之程式碼，若為偽(FALSE)，則執行else下方之程式碼，若程式中沒有else片段，則不執行任何程式碼。 X =30 if(X&gt;=60){ print( &quot;及格&quot; ) }else{ print( &quot;不及格&quot;) } ## [1] &quot;不及格&quot; if- else if -else 當條件判斷是超過三個以上，中間條件判斷可以使用 else if 來判斷，最後一個則用else即可 X=sample(1:30,1) if(X %in% 3:5){ print(paste(&quot;X=&quot;,X,&quot;,春天&quot;)) }else if(X %in% 6:8){ print(paste (&quot;X=&quot;,X,&quot;夏天&quot;)) }else if(X %in% 9:11){ print(paste (&quot;X=&quot;,X,&quot;秋天&quot;)) }else if (X %in% c(1,2,12)){ print(paste(&quot;X=&quot;,X,&quot;冬天&quot;)) }else {print(paste (&quot;X=&quot;,X,&quot;請輸入1-12數字&quot;))} ## [1] &quot;X= 28 請輸入1-12數字&quot; 5.2 for 迴圈 for(i in c(&quot;蘋果&quot;,&quot;香蕉&quot;,&quot;西瓜&quot;)){ text &lt;- paste(&quot;這是&quot;,i ) print (text) } ## [1] &quot;這是 蘋果&quot; ## [1] &quot;這是 香蕉&quot; ## [1] &quot;這是 西瓜&quot; 5.3 while 迴圈 在R語言中，while迴圈用於在條件為真時重複執行一段程式碼。 while迴圈的基本語法結構如下，在每次迭代之前，R會檢查括號中的條件是否為真。如果為真，則執行迴圈內的程式碼；如果為假，則退出迴圈。 while (條件) { # 每次迭代要執行的程式碼 } 以下是一個使用while迴圈的範例，這段程式碼將輸出月份名稱： i &lt;- 1 while (i &lt;= 5) { print(month.name[i]) i &lt;- i + 1 } ## [1] &quot;January&quot; ## [1] &quot;February&quot; ## [1] &quot;March&quot; ## [1] &quot;April&quot; ## [1] &quot;May&quot; 5.4 repeat 迴圈 在R語言中，repeat迴圈用於重複執行一段程式碼，直到滿足特定的停止條件。這種迴圈的特點是沒有內建的條件來退出，必須使用break語句來明確地終止迴圈。 repeat { # 執行的程式碼 if (停止條件) { break } } 範例:打印數字直到達到特定值 # 展示如何使用repeat迴圈從1打印到5 x &lt;- 1 repeat { print(x) if (x &gt;= 5) { break } x &lt;- x + 1 } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 5.5 break與next 在 R 語言中，break 和 next 是用於控制迴圈流的兩個關鍵字。 break: 用於立即終止最內層的迴圈，不會影響外層的執行。 next: 跳過當前最內層迴圈的剩餘程式碼，直接進入下一次迭代。 範例: break # 使用 break 退出迴圈 for (i in 1:10) { if (i == 5) { break # 當 i 等於 5 時退出迴圈 } print(i) # 打印 i } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 範例: next # 使用 next 跳過某些值 for (i in 1:10) { if (i %% 2 == 0) { next # 當 i 是偶數時跳過這次迭代 } print(i) # 打印 i } ## [1] 1 ## [1] 3 ## [1] 5 ## [1] 7 ## [1] 9 "]]
