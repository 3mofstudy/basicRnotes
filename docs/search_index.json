[["中級r--函數調用.html", "Chapter 6 中級R- 函數調用 6.1 do.call 及call 6.2 參考資料", " Chapter 6 中級R- 函數調用 6.1 do.call 及call 6.1.1 1. do.call 基本用途 雖然R語言有型別很豐富的資料結構，但很多時候資料結構比較複雜，那麼基本上就會用到list這種結構的資料型態。 但是list物件很難以文字的形式導出，因此需要一個函數能快速地將複雜的list結構扁平化成向量(vector)或資料框(data.frame) 。 這裡要介紹的是do.call函數。 簡單的講，do.call 的功能就是執行一個函數，而這個函數的參數呢，放在一個list裡面, 是list的每個子元素，見下列範例: 一心營業額 = list(&quot;北區&quot;=data.frame(&quot;月份&quot;= c(7,8,9,10) ,&quot;銷售額&quot;=c(10000,27000,68500,34000)), &quot;中區&quot;=data.frame(&quot;月份&quot;= c(7,8,9,10) ,&quot;銷售額&quot;=c(9000,10400,59400,48000)), &quot;南區&quot;=data.frame(&quot;月份&quot;= c(7,8,9,10) ,&quot;銷售額&quot;=c(8000,96000,70400,63500))) do.call(rbind,一心營業額) ## 月份 銷售額 ## 北區.1 7 10000 ## 北區.2 8 27000 ## 北區.3 9 68500 ## 北區.4 10 34000 ## 中區.1 7 9000 ## 中區.2 8 10400 ## 中區.3 9 59400 ## 中區.4 10 48000 ## 南區.1 7 8000 ## 南區.2 8 96000 ## 南區.3 9 70400 ## 南區.4 10 63500 do.call的第一個參數(what)預備執行的函數名稱,第二個參數(args)放list格式包起來的資料及相關函數設定，如下列範例: vec1 &lt;- c(4,9,NA,8,12,74,36,NA,55) do.call(mean, list(vec1)) ##輸出NA，因為無設定第二個參數值 ## [1] NA do.call(mean, list(vec1,na.rm = TRUE)) ##排除遺失值後，計算平均值 ## [1] 28.28571 6.1.2 2. do.call 亦常運用於data.frame的子元素 data.frame 和 list 最大差別是data.frame屬於二維資料，而list屬於三維資料，do.call能處理三維資料的list格式，其實就像是作業系統(eg. Windows系統 macOS系統)往往也向下相容更低版次的OS系統，而事實上，do.call函數比起運用在list格式，實務上更常用do.call來處理data.frame格式的函數調用 dt &lt;- data.frame(&#39;letter&#39; = letters[1:10], &#39;number&#39; = 1:10, &#39;value&#39; = c(&#39;+&#39;,&#39;-&#39;)) dt[[1]] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; dt[[2]] ## [1] 1 2 3 4 5 6 7 8 9 10 dt[[3]] ## [1] &quot;+&quot; &quot;-&quot; &quot;+&quot; &quot;-&quot; &quot;+&quot; &quot;-&quot; &quot;+&quot; &quot;-&quot; &quot;+&quot; &quot;-&quot; do.call(paste0,dt) ## [1] &quot;a1+&quot; &quot;b2-&quot; &quot;c3+&quot; &quot;d4-&quot; &quot;e5+&quot; &quot;f6-&quot; &quot;g7+&quot; &quot;h8-&quot; &quot;i9+&quot; &quot;j10-&quot; 6.1.3 call 與 do.call的差異 call 和 do.call很像，兩者主要差異: do.call() 執行某個已知現存的函數，例如內建函數sum()、mean()等，需將參數以列表的形式傳遞給函數後，才能正常運作。 #自創一個能計算BMI的函數 BMI &lt;- function(ht, wt) { x &lt;- wt / (ht / 100)^2 return(x) } # 建立一個有身高及體重資料集 DT &lt;- data.frame(&quot;ht&quot; = c(155, 168, 159), &quot;wt&quot; = c(80, 60, 48)) # 使用 do.call 將列表作為參數傳遞給 BMI 函數 result &lt;- do.call(BMI, list(ht = DT$ht, wt = DT$wt)) # 印出結果 print(result) ## [1] 33.29865 21.25850 18.98659 call() 以動態的方式生成函數呼叫，再用eval函數執行呼叫 #自創一個能計算BMI的函數 BMI &lt;- function(ht, wt) { x &lt;- wt / (ht / 100)^2 return(x) } # 建立一個有身高及體重資料集 DT &lt;- data.frame(&quot;ht&quot; = c(155, 168, 159), &quot;wt&quot; = c(80, 60, 48)) # 使用call函數動態生成函數呼叫 my_call &lt;- call(&quot;BMI&quot;, ht = DT$ht, wt = DT$wt) # 以eval函數執行生成的函數呼叫 result &lt;- eval(my_call) # 印出結果 print(result) ## [1] 33.29865 21.25850 18.98659 由上面兩段程式碼可以看出來，call函數還需要搭配eval函數執行後續的呼叫，所以實務上，do.call往往更常被使用，而另一個快速調用函數的方法則是apply家族 6.2 參考資料 6.2.1 1.線上資源 R do.call &amp; call 函数教程 R語言中eval和do.call的用法 R語言do.call 函數用法詳解 "]]
