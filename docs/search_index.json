[["index.html", "R語言程式設計 Chapter 1 關於 1.1 關於作者 1.2 寫書的起源 1.3 本書的理解 1.4 參考資料", " R語言程式設計 露西Lucy 2024-03-18 Chapter 1 關於 1.1 關於作者 跨領域的我，早年是在醫院及大學從事研究助理，協助教授或醫師收集臨床試驗的病人，在漫長工作生涯中，發現收集臨床資料，進行統計分析，是個人最喜歡的工作項目。早年學校習得高等統計知識及SPSS軟體應用後，到自己出社會以後自學R，在資料分析的路上越走越遠，但仍感謝過去工作實務經驗讓自己即使跨領域，轉行投入氣象數據分析，也不至於讓自己窘迫。 1.2 寫書的起源 網路上其實很多免費的線上R教學，基礎教學偏多，而稍複雜一點Code常常散落各地，雖然自身有用Nation隨時進行筆記摘錄，但是隨著筆記越來越多時，便有了想統整一份專屬自己學習後的內化筆記，而當這想法開始縈繞在我心中時，便有了開始撰寫這本線上電子書念頭。本書定位為起始筆記第一個敲門磚，未來會逐步加強充實內容，預計會寫下列幾個系列筆記，第一筆記R語言程式設計(基礎、中階及高階)，不太涉及統計原理方面知識，而是單純介紹R程式語言，屬於R的基本功，而實務上進行一項專案統計分析時，往往有70%時間都是進行資料前處理，各種資料轉換，遺失值處理、特徵轉化的步驟，這最需要就是R的基本功，熟練基本功可以讓自己工作效率大幅提升。第二筆記 統計學與R操作，側重在統計學觀念的釐清及如何應用R來進行統計分析，此部分教學，會與SPSS進行搭配輔助說明，其目的是讓有一定統計知識且慣用SPSS的統計人員，能利用過去分析經驗來銜接，輔助有心轉換分析跑道的學者能快速使用R來進行統計。第三部分 簡單介紹R資料視覺化與網路爬蟲， 第四部份介紹時下最流行大數據分析，例如非監督式學習、監督式學習，第 五部份重點在於精進R分析者工作技能，例如如何用R來 自動收信及寄信，用R串聯google文件、google活頁簿，進行線上互動。 R語言程式設計 (本書的重點) 基礎R語言 進階R語言 統計原理與軟體實作 統計與機率 描述性統計 推論性統計 存活分析 資料視覺化與網路爬蟲 網路爬蟲與R程式 各式資料下載與串接 資料視覺化 大數據分析與R 資料庫介紹(關聯式VS非關聯式) 非監督式學習 監督式學習 R及RStudio專章性學習 RStudio與git、GitHub 互動 串聯google文件、google活頁簿 用R程式來自動收信及寄信 用R及RStudio發表線上電子書 用R、RStudio及Hguo建立專屬個人部落格 1.3 本書的理解 猶記得剛開始自學R，是報名台大資訊訓練班假日面授課程，老師上課很快，常常基礎功稍微介紹一點後，老師就開始教導各種R好用套件，例如data.table、dplyr套件應用，但對一個小菜雞的我，即便學會這些進階套件，我仍對基礎R是一知半解，而實務上遵循老師教法使用這些套件時，常常出現一些不可預期錯誤，我完全不會解決bug，所以又只好買很多R的書籍，上了很多其他視訊課程，才慢慢把R基礎知識搞懂，現在的我才明白，不是老師教得不好，而是學海無涯，老師通常只能用最短時間講解最精華的部分，最後只能是師父引進門，修行在個人，靠大家自己不斷磨練精進自己的知識與技能。 我個人學習一個新知識新技術時，往往會先理解整個大架構，再慢慢精讀每一個章節，學習R語言也是如此，所以即使data.table、dplyr或者lubridate等套件真的很有用，但是基本功的 data.frame使用 也很重要。實務上常常做各種資料轉換，有些資料凌亂無法應用這些套件，基礎功的函數雖然執行效率比較慢，但卻能應付大部分工作，不容易因格式不符而出現錯誤連連的訊息。 初學者不應該先追求程式效率，而是著重於能實現心中所想要功能，所以即便初學者花100行代碼，寫了要花10秒才能執行完畢的功能，但至少是成功完成這項工作任務。往後等熟習這些程式邏輯，再練習寫更進階語法，來優化程式碼(舉例從原先100行10秒執行完畢才能完成功能，縮短到只需要50行3秒就能執行，就是優化)，下表示我整理出來程度表，本書分成初階、中階及高級，建議初學者應該先把基礎程式搞懂後，在慢慢學習中高階寫法，後面才能越來越駕輕就熟。下表以簡單例子來解釋，例如迴圈章節而言，新手用for迴圈，有點底子用apply，高手用purrr套件。 程度 資料結構 迴圈 日期轉換 資料合併 基礎 data.frame for迴圈 as.Date as.POSIXct cbind, rbind 進階 data.table apply家族函式 purrr家族函式 lubridate套件 dplyr套件(join函數) 最後提醒，學程式也忌諱未學會走路就急學跑步，基礎R知識未搞懂，就貿然去學習高級語法，往後日子常與Error message為伍，次數多到開始懷疑人生，懷疑自己選擇是否正確，是否要放棄R? 然而別放棄，慢慢循序漸進，基礎功打底，R的美好將逐漸向你靠近，努力加油 ，共勉之。 1.4 參考資料 曾意儒 –資料科學與R語言 郭耀仁 –認識R的美好 林建甫 –R資料科學與統計 "],["系統環境設定.html", "Chapter 2 系統環境設定 2.1 系統環境查詢 2.2 環境設定函數 2.3 更改環境語系 2.4 新增專案 2.5 常用快速鍵", " Chapter 2 系統環境設定 2.1 系統環境查詢 使用sessionInfo()可以查詢目前R運行的詳細情形，包含R版本號、R套件清單與版本號、語系 ##查詢目前系統環境 sessionInfo() ## R version 4.3.3 (2024-02-29 ucrt) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 11 x64 (build 22631) ## ## Matrix products: default ## ## ## locale: ## [1] LC_COLLATE=Chinese (Traditional)_Taiwan.utf8 ## [2] LC_CTYPE=Chinese (Traditional)_Taiwan.utf8 ## [3] LC_MONETARY=Chinese (Traditional)_Taiwan.utf8 ## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Traditional)_Taiwan.utf8 ## ## time zone: Asia/Taipei ## tzcode source: internal ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] digest_0.6.35 R6_2.5.1 bookdown_0.38 fastmap_1.1.1 ## [5] xfun_0.42 cachem_1.0.8 knitr_1.45 htmltools_0.5.7 ## [9] rmarkdown_2.26 lifecycle_1.0.4 cli_3.6.2 sass_0.4.8 ## [13] jquerylib_0.1.4 compiler_4.3.3 rstudioapi_0.16.0 tools_4.3.3 ## [17] evaluate_0.23 bslib_0.6.1 yaml_2.3.8 jsonlite_1.8.8 ## [21] rlang_1.1.3 查詢或設定環境目錄 使用setwd，可以指定某個資料夾為當前環境目錄，getwd可以查詢目前的環境目錄。 ##設定當前目錄 setwd(&quot;C:/github/basicRnotes&quot;) ##查詢當前目錄 getwd() 如果懶得打指令，也可以透過RStudio視窗中的選項按鈕來執行，Set As Working Directory 等同於setwd指令， Go To Working Directory等同於getwd指令。 2.2 環境設定函數 環境設定函數為options()，用options()指令可以設定一些環境變量，使用help(options)可以查看詳細的參數資訊，常見操作如下: 數字位數的設置，options(digits=n)，n一般預設是7位，但實際上的範圍是1~22，可以隨意設定位數。 #這個指令，可以把R的整數表示能力設為10位元。 options(digits=10) 套件的安裝，使用下面的命令，可以指定預備下載端點。 options(CRAN=&quot;http://cran.r-project.org&quot;) install.packages(&quot;套件名稱&quot;) 設定游標類型(prompt參數設定)。 ##游標開始預設為 &gt; options(prompt=&quot;$&quot;) 設置 忽略警告(或錯誤)訊息出現 ##忽略任何警告，不顯示 options(warn=-1) ##顯示警告(預設) options(warn=1) 2.3 更改環境語系 用Sys.setlocale()查看當前語系(預設中文)，調整locale參數可暫時修改語系，但重開R時，語系會返回預設值。 Sys.setlocale() ## [1] &quot;LC_COLLATE=Chinese (Traditional)_Taiwan.utf8;LC_CTYPE=Chinese (Traditional)_Taiwan.utf8;LC_MONETARY=Chinese (Traditional)_Taiwan.utf8;LC_NUMERIC=C;LC_TIME=Chinese (Traditional)_Taiwan.utf8&quot; 將中文語系改為英文語系(暫時性) Sys.setlocale(&quot;LC_TIME&quot;, locale =&quot;English&quot;) # 也可以用 en.UTF-8 ## [1] &quot;English_United States.1252&quot; #範例 format(Sys.Date(), &quot;%A&quot;) #星期 ## [1] &quot;Sunday&quot; 將英文語系變回中文語系 Sys.setlocale(&quot;LC_TIME&quot;, locale =&quot;zh_TW.UTF-8&quot;) ## [1] &quot;zh_TW.UTF-8&quot; format(Sys.Date(), &quot;%A&quot;) #星期 ## [1] &quot;星期日&quot; 4.各國語系設定 國家語系 語系設定 format(Sys.Date(), “%A”) 範例輸出 日本 Sys.setlocale(“LC_TIME”, locale =“ja_JP.UTF-8”) “土曜日” 韓國 Sys.setlocale(“LC_TIME”, locale =“ko_KR.UTF-8”) “토요일” 德語 Sys.setlocale(“LC_TIME”, locale =“de_DE.UTF-8”) “Samstag” 俄語 Sys.setlocale(“LC_TIME”, locale =“ru_RU.UTF-8”) “суббота” 西班牙語 Sys.setlocale(“LC_TIME”,locale =“es_ES.UTF-8”) “sábado” 泰語 Sys.setlocale(“LC_TIME”, locale =“th_TH.UTF-8”) “เสาร์” 越南語 Sys.setlocale(“LC_TIME”, locale =“vi_VN.UTF-8”) “Thứ Bảy” 2.4 新增專案 RStudio是一個很強大IDE工具，凡是R使用者幾乎都是利用RStudio進行開發，RStudio可以輕鬆新增一個專案，為每一個專案設置專屬環境，安裝不同版本R及相關R套件，開啟新的專案可從工具列選取File -&gt; New Project。 點選New Projet按鈕後，會出現三個選項，選項功能如下 New Directory: 建立新資料夾來新增專案 Existing Directory:用舊有資料夾來新增專案 Version Control: 建立Git/subversion版本控管的新專案 其實如想要建立有Git版本控管的新專案，可直接選擇New Directory-&gt; New Project， 勾選Create a git repository ，命名好專案名稱及選定存放位置後， 按下Create Project，即可建好新專案 創建好新專案後，RStudio通常會自動開啟新專案，可由RStudio右上角看到目前處於哪個專案中，在檔案目錄中，可看到以專案名稱為名稱的.Rproj檔，該檔就是專屬的R專案設定檔，若是哪一天該資料夾不再當專案使用時，只要刪除.Rproj檔即可。 設定專案有很多好處，除為每一個專案設置專屬環境，安裝不同版本R及相關R套件，工作路徑資料夾也是預設，同時RStudio的專案資料夾可以結合Git，做到新增或修改成程式碼後，就能進行版本控管，並可以同步更新到GitHub。 除此之外，RStudio預設許多不同的專案範本，可以讓使用者輕鬆利用這些專案範本建立套件、電子書、部落格及互動式網頁，功能強大且齊全。 2.5 常用快速鍵 快速鍵 說明 快速鍵 說明 Ctrl + L 清除Console Ctrl + = 放大螢幕 Alt + - 賦值 &lt;- Ctrl + - 縮小螢幕 Ctrl +Shift+ C 註解/取消註解 Ctrl + Enter 執行當前程式碼 Ctrl +Shift+ M 串流 %&gt;% Ctrl +Alt +R 執行全部程式碼 Ctrl +Shift+ N 新增.R檔 Ctrl +Alt +A 執行先前程式碼 "],["元素介紹.html", "Chapter 3 元素介紹 3.1 資料賦值 3.2 資料型態 3.3 屬性查詢與轉換 3.4 運算子", " Chapter 3 元素介紹 3.1 資料賦值 資料的賦值，又稱為變數的設定。在進入R領域前，需要理解何謂是變數，變數就是可變動的數值，設定方式為變數名稱。在R中&lt;- 及=符號皆可被用來賦予變數，但R科學家更常使用&lt;-，在RStudio中，可用快速鍵Alt+- 快速形成 a &lt;- 10 b = 15 a+b ## [1] 25 3.2 資料型態 資料型態可分成一般性資料型態，和特殊性資料型態，初學者基本上學會一般性資料型態就已足夠，而特殊性資料型態通常應用在特殊環境，例如factor是R程式特殊專有資料型態，常運用統計學上類別變量相關分析，ts常用於與時間序列有關的統計。本章節會介紹一般性常見的資料型態，特殊性資料型態會在之後章節(中級篇或高級篇)，進一步介紹。 一般性(常見性) 特殊性 字串(character) 因素(factor) 數值(numeric) 時間序列(ts) 布林值(logic) 地圖格式(sp, sf) 日期/時間 (Date/ POSIXct POSIXt) 其他( eg..) 3.2.1 字串 字串可用單引號或雙引號包起來代表，何時使用單引號或雙引號其實是隨意，只是需要注意一點，當單引號亦視為字串中內容時，外圍則須用雙引號包起來，反之亦然 name &lt;- &quot;Mary Wang&quot; print(name) ## [1] &quot;Mary Wang&quot; citizenship &lt;- &#39;Japan&#39; print(citizenship) ## [1] &quot;Japan&quot; sentences &lt;- &quot;I&#39;m an adult&quot; #單引號需包在雙引號內 print(sentences) ## [1] &quot;I&#39;m an adult&quot; 3.2.2 數值 數學的數包含實數(numeric)和複數(complex)，R是專為計算數學相關領域而發展的程式語言，數的型態多於其他程式語言，R能處理實數(numeric)與複數(complex)， 實數又包括整數（沒有小數點）與浮點數（有小數點）的數值，所以在R的數值中，通常分成三種，分別為: numeric: 浮點數 integer: 整數 complex: 複數 一般可以用class來檢查變數類型，正常來說，數字都是預設為浮點數 class(5) ## [1] &quot;numeric&quot; 若要指定整數，可以在數字後面加上L class(5L) ## [1] &quot;integer&quot; 若要新增一個複數也很簡單，在數字後面加上i就行了 class(3i) ## [1] &quot;complex&quot; 3.2.3 布林值 布林值又稱為邏輯值((logic)，用於邏輯判斷，可使用大寫TRUE或T代表真，大寫FALSE或F代表假，此外布林值可以進行加減運算， TRUE =1 ，FALSE =0 A &lt;- TRUE class(A) ## [1] &quot;logical&quot; B &lt;- FALSE class(B) ## [1] &quot;logical&quot; C &lt;-T class(B) ## [1] &quot;logical&quot; print(A+B+C) ## [1] 2 3.2.4 日期/時間 (1) 取得當下時間資訊 R內建有幾個函數，可以查詢當下系統的日期、時間及時區資訊 Sys.Date() #當前日期 類似lubridate::today() ## [1] &quot;2024-09-29&quot; date() #當前系統日期和時間 ## [1] &quot;Sun Sep 29 03:15:06 2024&quot; Sys.time() #當前系統日期和時間 lubridate::now() ## [1] &quot;2024-09-29 03:15:06 CST&quot; Sys.timezone() #有關時區的信息將返回當前時區的名稱 ## [1] &quot;Asia/Taipei&quot; (2) as.Date 函數(文字轉日期) as.Date 可以將文字或數字格式轉換成日期格式，使用時，第一個參數若放文字格式，後面,tryFormats參數輸入相對應的原文字格式 as.Date(&quot;2024-01-05&quot;,tryFormats=&quot;%Y-%m-%d&quot;) ## [1] &quot;2024-01-05&quot; as.Date(&quot;2024/01/06&quot;,tryFormats=&quot;%Y/%m/%d&quot;) ## [1] &quot;2024-01-06&quot; as.Date(&quot;20240107&quot;,tryFormats=&quot;%Y%m%d&quot;) ## [1] &quot;2024-01-07&quot; 以下是常用日期格式符號 符號 說明 %Y 四位數字表示的年份（0000-9999） %y 兩個數字表示的年份（00-99） %m 兩個數字月份(01-12) %B 中文月份(七月、八月) 英文月份全名(January、February 、March) %b 中文月份(七月、八月) 英文月份縮寫(Jan，Feb，Ma) %d %e 月份中的天，取值範圍是01-31 月份中的天，取值範圍是1-31 %A 中文星期(星期六) 英文星期全名(Monday, Tuesday) ％a 中文星期(週六) 英文星期縮寫(Mon, Tue) %u 星期 1:星期一，7:星期日 %w 星期 1:星期一，0:星期日 %W 一年中的第幾個完整星期，以數字表示。這個數字是從每年的第一個星期一作為第0週來計算的 (3) as.Date 函數(數字轉日期) #as.Date(31) as.Date(31,origin=&quot;2024-01-01&quot;) ## [1] &quot;2024-02-01&quot; (4) 擷取特定日期格式 #輸出年份： format(Sys.Date(),format=&quot;%Y&quot;) ## [1] &quot;2024&quot; format(Sys.Date(),format=&quot;%y&quot;) ## [1] &quot;24&quot; #輸出月份： format(Sys.Date(),format=&quot;%m&quot;) ## [1] &quot;09&quot; format(Sys.Date(),format=&quot;%b&quot;) ## [1] &quot;九月&quot; format(Sys.Date(),format=&quot;%B&quot;) ## [1] &quot;九月&quot; #輸出日期： format(Sys.Date(),format=&quot;%d&quot;) ## [1] &quot;29&quot; #輸出星期： format(Sys.Date(),format=&quot;%A&quot;) ## [1] &quot;星期日&quot; format(Sys.Date(),format=&quot;%a&quot;) ## [1] &quot;週日&quot; format(Sys.Date(),format=&quot;%u&quot;) ## [1] &quot;7&quot; format(as.Date(&quot;2024-02-01&quot;),format=&quot;%w&quot;) ## [1] &quot;4&quot; #輸出週數： format(as.Date(&quot;2024-02-01&quot;),format=&quot;%W&quot;) ## [1] &quot;05&quot; (5) 時間處理 #as.POSIXlt() # 如果只有年月日的計算就是上面那種as.DATE格式 可是如果包含到時分秒 就要用到下列轉換 #as.POSIXct() #從1970年1月1日以後開始計算秒數 D1 &lt;- as.POSIXlt(&quot;2023-08-01 03:00:00&quot; ,tryFormats = c(&quot;%Y-%m-%d %H:%M:%S&quot;)) D2 &lt;- as.POSIXlt(&quot;2023-08-02 08:00:00&quot; ,tryFormats = c(&quot;%Y-%m-%d %H:%M:%S&quot;)) 以下是常用時間格式符號 符號 說明 %H 小時（24小時制） %I 小時（12小時制） %p 對於12小時制，指定上午（AM）或下午（PM） %M 分鐘 %S 秒 (6) 擷取特定時間格式 format(Sys.time(),format=&quot;%H&quot;) #輸出小時 ## [1] &quot;03&quot; format(Sys.time(),format=&quot;%M&quot;) #輸出分鐘 ## [1] &quot;15&quot; format(Sys.time(),format=&quot;%S&quot;) #輸出秒數 ## [1] &quot;06&quot; format(Sys.Date(),format=&quot;%Y年%m月%d日&quot;) ## [1] &quot;2024年09月29日&quot; format(Sys.Date(),format=&quot;西元%Y年%m月%d日&quot;) ## [1] &quot;西元2024年09月29日&quot; (7) 日期時間的加減 #單純加秒數 D1+1 ## [1] &quot;2023-08-01 03:00:01 CST&quot; #兩個日期時間相加減 D2-D1 # Time difference of 1.208333 days ## Time difference of 1.208333 days difftime(D2,D1, units = &quot;mins&quot;) #Time difference of 1740 mins ## Time difference of 1740 mins 3.3 屬性查詢與轉換 資料查詢可根據資料類型來分類 class可以查詢某物件的屬性，如下圖所示 a &lt;- &quot;dog&quot; class(a) ##屬性 純文字 (character) ## [1] &quot;character&quot; b &lt;- 380 class(b) ##屬性 數字 (numeric) ## [1] &quot;numeric&quot; c &lt;- TRUE class(c) ##屬性 邏輯值 (logical) ## [1] &quot;logical&quot; d &lt;- Sys.time() class(d) ##屬性 日期時間 (&quot;POSIXct&quot; &quot;POSIXt&quot;) ## [1] &quot;POSIXct&quot; &quot;POSIXt&quot; 3.4 運算子 運算子一般分成二類，第一類為常見用於加減乘除的算術運算子，第二類為邏輯運算子，通常根據所判斷的規則，輸出結果為TRUE 或FALSE，常與條件控制(if-else)搭配使用。 3.4.1 算術運算子 1.一般算術運算子 符號 意義 範例指令 範例結果 + 加 3+4 7 - 減 10-8 2 * 乘 5*6 30 / 除 130/5 26 ^ 指數乘冪 2^4 16 %% 餘數 78%%10 8 %/% 商數 78%/%10 7 2.特殊算術運算子 有些算術運算子，適用於矩陣的計算 符號 意義 %*% 矩陣內積乘法 %o% 矩陣外積乘法 %x% 矩陣Kronecker乘法 A = matrix(rep(c(1,2,3),2),nrow = 2,byrow=F) print (A) ## [,1] [,2] [,3] ## [1,] 1 3 2 ## [2,] 2 1 3 B = matrix(rep(c(1,2,3),2),nrow = 3,byrow=T) print (B) ## [,1] [,2] ## [1,] 1 2 ## [2,] 3 1 ## [3,] 2 3 #矩陣內積乘法 A %*% B ## [,1] [,2] ## [1,] 14 11 ## [2,] 11 14 #矩陣外積乘法 A %o% B ## , , 1, 1 ## ## [,1] [,2] [,3] ## [1,] 1 3 2 ## [2,] 2 1 3 ## ## , , 2, 1 ## ## [,1] [,2] [,3] ## [1,] 3 9 6 ## [2,] 6 3 9 ## ## , , 3, 1 ## ## [,1] [,2] [,3] ## [1,] 2 6 4 ## [2,] 4 2 6 ## ## , , 1, 2 ## ## [,1] [,2] [,3] ## [1,] 2 6 4 ## [2,] 4 2 6 ## ## , , 2, 2 ## ## [,1] [,2] [,3] ## [1,] 1 3 2 ## [2,] 2 1 3 ## ## , , 3, 2 ## ## [,1] [,2] [,3] ## [1,] 3 9 6 ## [2,] 6 3 9 #矩陣 Kronecker 乘法 A %x% B ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] 1 2 3 6 2 4 ## [2,] 3 1 9 3 6 2 ## [3,] 2 3 6 9 4 6 ## [4,] 2 4 1 2 3 6 ## [5,] 6 2 3 1 9 3 ## [6,] 4 6 2 3 6 9 3.4.2 邏輯運算子 符號 意義 範例指令 範例結果 &lt; 小於 3&lt;4 TRUE &gt; 大於 10&gt;8 TRUE == 等於 5==6 FALSE != 不等於 5!=6 TRUE &gt;= 大於等於 10&gt;=8 TRUE &lt; = 小於等於 10&lt;=8 FALSE ! 邏輯反轉 !5==4 TRUE %in% 包含 5 %in% c(1:100) TRUE "],["資料結構.html", "Chapter 4 資料結構 4.1 資料型態相同 4.2 資料型態不同 4.3 特殊資料結構 4.4 資料鍵入與印出 4.5 複製及貼上 4.6 資料匯入 4.7 資料匯出", " Chapter 4 資料結構 R的資料結構以維度來看，可區分成1維、2維及3維以上，以資料型態可分為資料同質與資料不同質。資料同質表示存放資料元素全部相同，如全是數字，或全都是文字。非同質表示可同時放數字、文字及日期等各種資料元素。實務上數據分析最常用到資料結構就是二維不同質的 data.frame 資料框，其次是一維同質的Vector 向量。而在網路爬蟲時，經常將下載好的JSON檔轉換成 三維不同質list 或是 二維不同質 data.frame，下表是根據維度及資料型態區分出的5個不同資料結構 結構\\資料型態 資料型態(相同) 資料型態(不同) 1維結構 向量(vector) – 2維結構 矩陣(matrix) 資料框(data.frame) 3維結構以上 陣列(array) 列表(list) 4.1 資料型態相同 4.1.1 一維結構(Vector) 向量(Vector)是R語言中最簡單的資料結構，語法是用c 來集合 tel &lt;- c(0912370456,0954310641,0965120744) print(tel) ## [1] 912370456 954310641 965120744 name &lt;- c(&quot;王小名&quot;,&quot;張大同&quot;) print(name) ## [1] &quot;王小名&quot; &quot;張大同&quot; 4.1.2 二維結構(matrix) matrix又稱成矩陣，可處理二維資料，是由一組相同資料元素組成，可以是一組數字、也可以是一組純文字，生成一個矩陣很簡單，使用matrix關鍵字，一共有5個參數可以設定 第一參數 data 放資料 (通常是放向量Vector) 第二參數 nrow 設定列數 第三參數 ncol 設定行數 第四參數 byrow 設定資料擺放順序是否依循row依序放入，預設為FALSE，表示是直行依序放入 第五參數 dimnames 設定列名及行名，通常用list資料型態來表示list[1]為列名(row),list[2]為行名(column) #ncol為列的設定,nrow = 行設定 matrix(data =1:28,ncol = 7,byrow = TRUE) ## [,1] [,2] [,3] [,4] [,5] [,6] [,7] ## [1,] 1 2 3 4 5 6 7 ## [2,] 8 9 10 11 12 13 14 ## [3,] 15 16 17 18 19 20 21 ## [4,] 22 23 24 25 26 27 28 使用dimnames來設定列名與行名 matrix(data =1:28,ncol = 7,byrow = TRUE, dimnames = list(c(&quot;第1週&quot;,&quot;第2週&quot;,&quot;第3週&quot;,&quot;第4週&quot;), c(&quot;星期一&quot;,&quot;星期二&quot;,&quot;星期三&quot;,&quot;星期四&quot;,&quot;星期五&quot;,&quot;星期六&quot;,&quot;星期日&quot;) )) ## 星期一 星期二 星期三 星期四 星期五 星期六 星期日 ## 第1週 1 2 3 4 5 6 7 ## 第2週 8 9 10 11 12 13 14 ## 第3週 15 16 17 18 19 20 21 ## 第4週 22 23 24 25 26 27 28 4.1.3 三維結構 (array) 陣列array能處理三維以上資料，同樣由一組相同資料元素組成,使用array關鍵字生成一個陣列，與matrix不同，array只有3個參數可以設定(無ncol、nrow及byrow參數)，數字擺放順序都是依垂直行放入，相關參數說明如下: 第一參數 data 放資料 (通常是放向量Vector) 第二參數 dim 設定 列數、行數及第三緯度以上數量 第三參數 dimnames 設定列名及行名等，以list資料型態來表示list[1]為列名(row),list[2]為行名(column),list[3]放第三維度以後的名稱 3維的array array(1:24,c(3,4,2), dimnames = list(產品=c(&quot;紅茶&quot;,&quot;綠茶&quot;,&quot;烏龍茶&quot;), 月份=c(&quot;1月&quot;,&quot;2月&quot;,&quot;3月&quot;,&quot;4月&quot;), 區域=c(&quot;東區&quot;,&quot;西區&quot;) )) ## , , 區域 = 東區 ## ## 月份 ## 產品 1月 2月 3月 4月 ## 紅茶 1 4 7 10 ## 綠茶 2 5 8 11 ## 烏龍茶 3 6 9 12 ## ## , , 區域 = 西區 ## ## 月份 ## 產品 1月 2月 3月 4月 ## 紅茶 13 16 19 22 ## 綠茶 14 17 20 23 ## 烏龍茶 15 18 21 24 4維的array array(1:36,c(3,3,2,2), dimnames = list(產品=c(&quot;第一季&quot;,&quot;第二季&quot;,&quot;第三季&quot;), 月份=c(&quot;紅茶&quot;,&quot;綠茶&quot;,&quot;烏龍茶&quot;), 區域=c(&quot;東區&quot;,&quot;西區&quot;), 縣市=c(&quot;台中&quot;,&quot;台北&quot;) )) ## , , 區域 = 東區, 縣市 = 台中 ## ## 月份 ## 產品 紅茶 綠茶 烏龍茶 ## 第一季 1 4 7 ## 第二季 2 5 8 ## 第三季 3 6 9 ## ## , , 區域 = 西區, 縣市 = 台中 ## ## 月份 ## 產品 紅茶 綠茶 烏龍茶 ## 第一季 10 13 16 ## 第二季 11 14 17 ## 第三季 12 15 18 ## ## , , 區域 = 東區, 縣市 = 台北 ## ## 月份 ## 產品 紅茶 綠茶 烏龍茶 ## 第一季 19 22 25 ## 第二季 20 23 26 ## 第三季 21 24 27 ## ## , , 區域 = 西區, 縣市 = 台北 ## ## 月份 ## 產品 紅茶 綠茶 烏龍茶 ## 第一季 28 31 34 ## 第二季 29 32 35 ## 第三季 30 33 36 4.2 資料型態不同 4.2.1 二維結構 (data.frame) data.frame類似excel中的活頁簿，row 為橫行，column為直列，每一個column為一個變數或一個欄位，每一個row 為一筆資料。 一般csv檔，可以很輕鬆用read.csv函數，將資料匯入成data.frame DT &lt;- read.csv(&quot;./data/C0G660-2024-09-27.csv&quot;) head(DT) ## 觀測時間.hour. 測站氣壓.hPa. 氣溫... 相對溼度... 風速.m.s. ## 1 ObsTime StnPres Temperature RH WS ## 2 01 1007.0 28.7 100 0.0 ## 3 02 1006.8 28.5 100 0.2 ## 4 03 1006.3 28.3 100 0.0 ## 5 04 1006.8 28.3 100 0.0 ## 6 05 1006.7 28.2 100 0.0 ## 風向.360degree. 最大瞬間風.m.s. 最大瞬間風風向.360degree. 降水量.mm. ## 1 WD WSGust WDGust Precp ## 2 0 2.5 339 0.0 ## 3 0 1.6 351 0.0 ## 4 0 1.8 360 0.0 ## 5 0 0.0 0 0.0 ## 6 0 1.6 342 0.0 可以使用data.frame() 函數，自創data.frame 資料結構 score &lt;- data.frame(&quot;CLASS&quot; = rep(c(&quot;甲班&quot;,&quot;乙班&quot;,&quot;丙班&quot;), each = 10) , # 班級 &quot;SEX&quot; = sample(c(&quot;男&quot;,&quot;女&quot;),30,replace = T), #性別 &quot;AREA&quot; = sample(c(&quot;興和里&quot;,&quot;復興里&quot;,&quot;瑞興里&quot;,&quot;仁善里&quot;),30,replace = T), #居住里 &quot;CS&quot; = sample(30:80,30,replace = T), # 國文成績 &quot;ES&quot; = sample(50:100,30,replace = T),# 英文成績 &quot;MS&quot; = sample(40:90,30,replace = T) # 數學成績 ) 3.前幾筆查看 /後幾筆查看 用head()，可以查看前幾筆資料，預設查看前5筆;用tail()，可以查看最後幾筆資料，預設也是查看最後5筆 # 查看前5筆 head(score) ## CLASS SEX AREA CS ES MS ## 1 甲班 男 瑞興里 53 50 81 ## 2 甲班 男 復興里 46 54 57 ## 3 甲班 女 興和里 70 77 50 ## 4 甲班 男 興和里 63 97 74 ## 5 甲班 女 興和里 65 75 67 ## 6 甲班 男 復興里 62 59 81 # 查看最後5筆 tail(score) ## CLASS SEX AREA CS ES MS ## 25 丙班 女 瑞興里 44 54 68 ## 26 丙班 男 復興里 50 70 88 ## 27 丙班 男 復興里 43 81 69 ## 28 丙班 女 興和里 79 77 87 ## 29 丙班 男 復興里 31 87 75 ## 30 丙班 女 復興里 44 85 87 # 查看前10筆 head(score ,n=10) ## CLASS SEX AREA CS ES MS ## 1 甲班 男 瑞興里 53 50 81 ## 2 甲班 男 復興里 46 54 57 ## 3 甲班 女 興和里 70 77 50 ## 4 甲班 男 興和里 63 97 74 ## 5 甲班 女 興和里 65 75 67 ## 6 甲班 男 復興里 62 59 81 ## 7 甲班 男 瑞興里 72 97 60 ## 8 甲班 女 仁善里 46 71 49 ## 9 甲班 男 仁善里 40 88 83 ## 10 甲班 女 仁善里 41 60 80 data.frame 行與列 之 數量查詢 可用nrow()查看data.frame共有多少筆數(行數)，用ncol()查看變數的數量(列數)，用dim()同時查看幾行幾列 # 查詢行數 nrow(score) ## [1] 30 # 查詢列數 ncol(score) ## [1] 6 # 查詢行數與列數 dim(score) ## [1] 30 6 5.屬性查看 先前教過使用class可以查看某向量屬於哪種資料類型(文字、數值、日期)，但是class一次只能查看一種資料， 而data.frame是一個擁有很多欄位(很多屬性)的複雜物件，所以可改用str()來查看資料整體屬性。 # 查詢行數 str(score) ## &#39;data.frame&#39;: 30 obs. of 6 variables: ## $ CLASS: chr &quot;甲班&quot; &quot;甲班&quot; &quot;甲班&quot; &quot;甲班&quot; ... ## $ SEX : chr &quot;男&quot; &quot;男&quot; &quot;女&quot; &quot;男&quot; ... ## $ AREA : chr &quot;瑞興里&quot; &quot;復興里&quot; &quot;興和里&quot; &quot;興和里&quot; ... ## $ CS : int 53 46 70 63 65 62 72 46 40 41 ... ## $ ES : int 50 54 77 97 75 59 97 71 88 60 ... ## $ MS : int 81 57 50 74 67 81 60 49 83 80 ... 6.查詢欄位名/行名 # 查詢欄位名 colnames(score) # 也可使用 names(score) ## [1] &quot;CLASS&quot; &quot;SEX&quot; &quot;AREA&quot; &quot;CS&quot; &quot;ES&quot; &quot;MS&quot; # 查詢行名 rownames(score) ## [1] &quot;1&quot; &quot;2&quot; &quot;3&quot; &quot;4&quot; &quot;5&quot; &quot;6&quot; &quot;7&quot; &quot;8&quot; &quot;9&quot; &quot;10&quot; &quot;11&quot; &quot;12&quot; &quot;13&quot; &quot;14&quot; &quot;15&quot; ## [16] &quot;16&quot; &quot;17&quot; &quot;18&quot; &quot;19&quot; &quot;20&quot; &quot;21&quot; &quot;22&quot; &quot;23&quot; &quot;24&quot; &quot;25&quot; &quot;26&quot; &quot;27&quot; &quot;28&quot; &quot;29&quot; &quot;30&quot; 7.變更欄位名稱 # 變更所有欄位名稱 colnames(score) &lt;- c(&quot;班級&quot;,&quot;性別&quot;, &quot;居住&quot; , &quot;國文&quot;, &quot;英文&quot;,&quot;數學&quot;) # 變更某一個欄位名稱 colnames(score)[4] &lt;- &quot;國文成績&quot; # 重新查看欄位名稱 names(score) ## [1] &quot;班級&quot; &quot;性別&quot; &quot;居住&quot; &quot;國文成績&quot; &quot;英文&quot; &quot;數學&quot; colnames(score)[4] &lt;-&quot;國文&quot; 8.提取data.frame某欄某行資料 data.frame，用中括弧[,]來找出行列內容,第一個引數代表rows數，第二個引數代表column數，第二個引數數字代表某欄位順序，也可以直接輸入變數名稱直接提取資料出來，此外data.frame+$+變數名稱，可以提取整欄資料 score[3,] #提取第三位同學整筆資料 ## 班級 性別 居住 國文 英文 數學 ## 3 甲班 女 興和里 70 77 50 score[,5] #提取第5欄資料，英文成績 ## [1] 50 54 77 97 75 59 97 71 88 60 58 58 59 83 94 65 99 51 89 88 58 96 74 94 54 ## [26] 70 81 77 87 85 score[c(9,2,18,15),] #提取第9,2,18,15位同學整筆資料 ## 班級 性別 居住 國文 英文 數學 ## 9 甲班 男 仁善里 40 88 83 ## 2 甲班 男 復興里 46 54 57 ## 18 乙班 女 瑞興里 56 51 71 ## 15 乙班 男 瑞興里 40 94 51 score[,c(1,2,5)] #提取第1,2,5欄資料(班級 性別 英文) ## 班級 性別 英文 ## 1 甲班 男 50 ## 2 甲班 男 54 ## 3 甲班 女 77 ## 4 甲班 男 97 ## 5 甲班 女 75 ## 6 甲班 男 59 ## 7 甲班 男 97 ## 8 甲班 女 71 ## 9 甲班 男 88 ## 10 甲班 女 60 ## 11 乙班 女 58 ## 12 乙班 女 58 ## 13 乙班 女 59 ## 14 乙班 男 83 ## 15 乙班 男 94 ## 16 乙班 男 65 ## 17 乙班 女 99 ## 18 乙班 女 51 ## 19 乙班 女 89 ## 20 乙班 女 88 ## 21 丙班 女 58 ## 22 丙班 男 96 ## 23 丙班 女 74 ## 24 丙班 男 94 ## 25 丙班 女 54 ## 26 丙班 男 70 ## 27 丙班 男 81 ## 28 丙班 女 77 ## 29 丙班 男 87 ## 30 丙班 女 85 score[1:2,1:4] #指定某範圍的資料提取 ## 班級 性別 居住 國文 ## 1 甲班 男 瑞興里 53 ## 2 甲班 男 復興里 46 score[,c(&quot;班級&quot;,&quot;英文&quot;)] # 可直接鍵入變數名稱提取某欄位完整資料 ## 班級 英文 ## 1 甲班 50 ## 2 甲班 54 ## 3 甲班 77 ## 4 甲班 97 ## 5 甲班 75 ## 6 甲班 59 ## 7 甲班 97 ## 8 甲班 71 ## 9 甲班 88 ## 10 甲班 60 ## 11 乙班 58 ## 12 乙班 58 ## 13 乙班 59 ## 14 乙班 83 ## 15 乙班 94 ## 16 乙班 65 ## 17 乙班 99 ## 18 乙班 51 ## 19 乙班 89 ## 20 乙班 88 ## 21 丙班 58 ## 22 丙班 96 ## 23 丙班 74 ## 24 丙班 94 ## 25 丙班 54 ## 26 丙班 70 ## 27 丙班 81 ## 28 丙班 77 ## 29 丙班 87 ## 30 丙班 85 score$班級 # $+變數名稱可以提取某變數完整資料 ## [1] &quot;甲班&quot; &quot;甲班&quot; &quot;甲班&quot; &quot;甲班&quot; &quot;甲班&quot; &quot;甲班&quot; &quot;甲班&quot; &quot;甲班&quot; &quot;甲班&quot; &quot;甲班&quot; ## [11] &quot;乙班&quot; &quot;乙班&quot; &quot;乙班&quot; &quot;乙班&quot; &quot;乙班&quot; &quot;乙班&quot; &quot;乙班&quot; &quot;乙班&quot; &quot;乙班&quot; &quot;乙班&quot; ## [21] &quot;丙班&quot; &quot;丙班&quot; &quot;丙班&quot; &quot;丙班&quot; &quot;丙班&quot; &quot;丙班&quot; &quot;丙班&quot; &quot;丙班&quot; &quot;丙班&quot; &quot;丙班&quot; 資料合併 rbind()可以合併有相同變數的data.frame的資料，增加筆數 cbind()可以合併有相同筆數的data.frame的資料，增加變數 #增加筆數 addRow &lt;- c(&quot;甲班&quot; , &quot;女&quot;, &quot;興和里&quot; , &quot;42&quot; , &quot;83&quot; , &quot;57&quot;) rbind(score,addRow) ## 班級 性別 居住 國文 英文 數學 ## 1 甲班 男 瑞興里 53 50 81 ## 2 甲班 男 復興里 46 54 57 ## 3 甲班 女 興和里 70 77 50 ## 4 甲班 男 興和里 63 97 74 ## 5 甲班 女 興和里 65 75 67 ## 6 甲班 男 復興里 62 59 81 ## 7 甲班 男 瑞興里 72 97 60 ## 8 甲班 女 仁善里 46 71 49 ## 9 甲班 男 仁善里 40 88 83 ## 10 甲班 女 仁善里 41 60 80 ## 11 乙班 女 復興里 41 58 61 ## 12 乙班 女 復興里 42 58 87 ## 13 乙班 女 仁善里 72 59 81 ## 14 乙班 男 復興里 57 83 52 ## 15 乙班 男 瑞興里 40 94 51 ## 16 乙班 男 瑞興里 69 65 82 ## 17 乙班 女 復興里 69 99 62 ## 18 乙班 女 瑞興里 56 51 71 ## 19 乙班 女 瑞興里 72 89 81 ## 20 乙班 女 仁善里 49 88 65 ## 21 丙班 女 復興里 44 58 82 ## 22 丙班 男 復興里 55 96 53 ## 23 丙班 女 興和里 71 74 90 ## 24 丙班 男 興和里 69 94 56 ## 25 丙班 女 瑞興里 44 54 68 ## 26 丙班 男 復興里 50 70 88 ## 27 丙班 男 復興里 43 81 69 ## 28 丙班 女 興和里 79 77 87 ## 29 丙班 男 復興里 31 87 75 ## 30 丙班 女 復興里 44 85 87 ## 31 甲班 女 興和里 42 83 57 #增加欄位 &quot;自然&quot; &lt;- sample(50:100,30,replace = T) score &lt;- cbind(score,自然) head(score) ## 班級 性別 居住 國文 英文 數學 自然 ## 1 甲班 男 瑞興里 53 50 81 77 ## 2 甲班 男 復興里 46 54 57 64 ## 3 甲班 女 興和里 70 77 50 59 ## 4 甲班 男 興和里 63 97 74 91 ## 5 甲班 女 興和里 65 75 67 64 ## 6 甲班 男 復興里 62 59 81 59 善用$和賦值，也可以新增變數 #增加欄位 score$社會 &lt;- sample(50:100,30,replace = T) head(score) ## 班級 性別 居住 國文 英文 數學 自然 社會 ## 1 甲班 男 瑞興里 53 50 81 77 67 ## 2 甲班 男 復興里 46 54 57 64 79 ## 3 甲班 女 興和里 70 77 50 59 82 ## 4 甲班 男 興和里 63 97 74 91 67 ## 5 甲班 女 興和里 65 75 67 64 67 ## 6 甲班 男 復興里 62 59 81 59 76 4.2.2 三維結構 (list) list 和 data.frame 最大差別是data.frame屬於二維資料，而list屬於三維資料，list可以儲存各種資料類型， 甚至可以儲存data.frame 建立list，使用list() #建立list DT &lt;- list(&quot;考試日期&quot; =Sys.Date() ,&quot;考試類型&quot; = &quot;期中考試&quot; ,Score =score[1:10,]) 資料提取 list可用$，提取每一個向度資料，亦可使用中括弧[]，提取某向度資料 DT[1] #使用[]提取 ## $考試日期 ## [1] &quot;2024-09-29&quot; DT[2] #使用[]提取 ## $考試類型 ## [1] &quot;期中考試&quot; DT$Score #使用$提取 ## 班級 性別 居住 國文 英文 數學 自然 社會 ## 1 甲班 男 瑞興里 53 50 81 77 67 ## 2 甲班 男 復興里 46 54 57 64 79 ## 3 甲班 女 興和里 70 77 50 59 82 ## 4 甲班 男 興和里 63 97 74 91 67 ## 5 甲班 女 興和里 65 75 67 64 67 ## 6 甲班 男 復興里 62 59 81 59 76 ## 7 甲班 男 瑞興里 72 97 60 51 89 ## 8 甲班 女 仁善里 46 71 49 64 74 ## 9 甲班 男 仁善里 40 88 83 83 66 ## 10 甲班 女 仁善里 41 60 80 80 55 DT[3] 和DT[[3]] 差別，list的DT第三個向度是data.frame，若是想向下繼續擷取行列內容時， 就需要兩個中括弧[[]]，先將data.frame提取出來，之後再用[]選擇想要行列擷取出來 DT[3][2] #單個中括弧，無法擷取將data.frame內部某欄資訊 ## $&lt;NA&gt; ## NULL DT[[3]][2] ## 性別 ## 1 男 ## 2 男 ## 3 女 ## 4 男 ## 5 女 ## 6 男 ## 7 男 ## 8 女 ## 9 男 ## 10 女 DT[[3]][6:10,1:5] ## 班級 性別 居住 國文 英文 ## 6 甲班 男 復興里 62 59 ## 7 甲班 男 瑞興里 72 97 ## 8 甲班 女 仁善里 46 71 ## 9 甲班 男 仁善里 40 88 ## 10 甲班 女 仁善里 41 60 4.3 特殊資料結構 4.3.1 列聯表 R內建一些函數，可以計算統計意思上列聯表，也就是資料集各種分類組合的發生次數，發生百分比 4.3.1.1 table()函數 用法 table(X1,X2,...,Xk,dnn) x1~xk :為factor、list或data.frame變數 dnn: 設定各維度名稱 範例1 以鳶尾花卉資料集(iris)為例，使用table()，可以查出不同花品種出現次數 # 載入資料集 data(iris) # 查看資料集的前幾行 head(iris) ## Sepal.Length Sepal.Width Petal.Length Petal.Width Species ## 1 5.1 3.5 1.4 0.2 setosa ## 2 4.9 3.0 1.4 0.2 setosa ## 3 4.7 3.2 1.3 0.2 setosa ## 4 4.6 3.1 1.5 0.2 setosa ## 5 5.0 3.6 1.4 0.2 setosa ## 6 5.4 3.9 1.7 0.4 setosa #使用 table() 函數查出不同花品種出現次數 table(iris$Species) ## ## setosa versicolor virginica ## 50 50 50 範例2 使用table()計算CO2 資料集中兩個分類組合(植物類型VS 施肥方式)的發生次數 。 CO2 資料集包含以下變數： Plant: 植物的識別編號 Type: 植物類型（ Quebec 和 Mississippi） Treatment: 施肥方式（chilled 或 nonchilled） conc: 二氧化碳濃度（以毫升/升為單位） uptake: 植物對二氧化碳的吸收量（以微克/平方厘米為單位）。 # 載入資料集 data(CO2) # 查看資料集的前幾行 head(CO2) ## Plant Type Treatment conc uptake ## 1 Qn1 Quebec nonchilled 95 16.0 ## 2 Qn1 Quebec nonchilled 175 30.4 ## 3 Qn1 Quebec nonchilled 250 34.8 ## 4 Qn1 Quebec nonchilled 350 37.2 ## 5 Qn1 Quebec nonchilled 500 35.3 ## 6 Qn1 Quebec nonchilled 675 39.2 # 使用 table() 函數分析植物類型和處理的關係 tab1 &lt;- table(CO2$Type, CO2$Treatment,dnn = c(&quot;植物類型&quot;,&quot;施肥方式&quot;)) tab1 ## 施肥方式 ## 植物類型 nonchilled chilled ## Quebec 21 21 ## Mississippi 21 21 class(tab1) ## [1] &quot;table&quot; 4.3.1.2 margin.table() margin.table()，可計算列聯表的行與列個別加總，用法 margin.table(x, margin) x: table 或 array margin : 1= rows邊際加總; 2= columns邊際加總 #rows邊際加總 margin.table(tab1,1) # 等同 rowSums(tab1) ## 植物類型 ## Quebec Mississippi ## 42 42 #columns邊際加總 margin.table(tab1,2) # 等同 colSums(tab1) ## 施肥方式 ## nonchilled chilled ## 42 42 4.3.1.3 prop.table() prop.table()，可計算列聯表的行與列之比例，用法 prop.table(x, margin) x: table margin : 1= rows比例; 2= columns比例 #rows邊際比例 prop.table(tab1,1) ## 施肥方式 ## 植物類型 nonchilled chilled ## Quebec 0.5 0.5 ## Mississippi 0.5 0.5 #columns邊際比例 prop.table(tab1,2) ## 施肥方式 ## 植物類型 nonchilled chilled ## Quebec 0.5 0.5 ## Mississippi 0.5 0.5 4.3.1.4 ftable() ftable()類似table()功能，但會依其分類變數進行扁平化，以Arthritis資料集為例， 使用table()或ftable()處理三個分類變項時，會有不同呈現結果 Treatment : 組別 (Treated 治療組、Placebo 安慰劑組) Sex: 性別(Male男、Female女) Improved: 治療結果(None無改善、Some一點改善、Marked顯著改善) # 載入vcd套件中的Arthritis資料集 data(Arthritis,package = &quot;vcd&quot;) # 查看資料集的前幾行 head(Arthritis) ## ID Treatment Sex Age Improved ## 1 57 Treated Male 27 Some ## 2 46 Treated Male 29 None ## 3 77 Treated Male 30 None ## 4 17 Treated Male 32 Marked ## 5 36 Treated Male 46 Marked ## 6 23 Treated Male 58 Marked # 使用table() table(Arthritis$Sex,Arthritis$Improved,Arthritis$Treatment ,dnn = c(&quot;性別&quot;,&quot;治療結果&quot;,&quot;組別&quot;) ) ## , , 組別 = Placebo ## ## 治療結果 ## 性別 None Some Marked ## Female 19 7 6 ## Male 10 0 1 ## ## , , 組別 = Treated ## ## 治療結果 ## 性別 None Some Marked ## Female 6 5 16 ## Male 7 2 5 # 使用ftable() ftable(Arthritis$Sex,Arthritis$Improved,Arthritis$Treatment,dnn = c(&quot;性別&quot;,&quot;治療結果&quot;,&quot;組別&quot;)) ## 組別 Placebo Treated ## 性別 治療結果 ## Female None 19 6 ## Some 7 5 ## Marked 6 16 ## Male None 10 7 ## Some 0 2 ## Marked 1 5 資料輸入與輸出 4.4 資料鍵入與印出 4.4.1 資料鍵入 scan() readline(\"請輸入字串:\") 4.4.2 資料印出 print() 和cat()，都可以把資料打印到Console螢幕上，但是print()只能輸出一個完整文字訊息，如果想要利用print() 輸出一段話+某變數，就必須另外使用paste()或paste0()將兩個訊息結合成一個完整文字訊息才能用print()進行輸出，但cat()就沒有此問題，兩個以上訊息可以用”,” 來結合即可，範例如下: cat() name = &quot;Lucy&quot; cat( name ,&quot;帶狗狗去公園散步了&quot; ) ## Lucy 帶狗狗去公園散步了 print() name = &quot;Lucy&quot; print( paste(name ,&quot;帶狗狗去公園散步了&quot;) ) ## [1] &quot;Lucy 帶狗狗去公園散步了&quot; 4.5 複製及貼上 有兩個套件，可以輕鬆將R輸出結果轉化到剪貼簿後，就可以直接拿到Excel或Word中複製貼上，相當方便，clipr 套件基本不用再安裝，因為已經常規預設安中好 #A.把 clipboard 中（你已經複製好）的內容存在 text 變數中 text &lt;-clipr::read_clip() ##轉換成純文字向量(適合單行貼上) DT &lt;-clipr::read_clip_tbl() ##轉換成data.frame(適合表格貼上) #B.本該輸出至Console的內容暫存到 clipboard 容器，就可以貼到別處(例如Excel) clipr::write_clip(text) 另一個好用套件是psychTools #另一個好用套件 library(psychTools) text&lt;-psychTools::read.clipboard() text&lt;-psychTools::read.clipboard.tab() 4.6 資料匯入 4.6.1 匯入csv檔 library(readr) #呼叫csv檔的套件 score = read.csv(&quot;./data/score.csv&quot;,sep=&quot;,&quot;) head(score) 4.6.2 匯入excel檔 library(readxl)#呼叫excel檔的套件 4.6.3 匯入json檔 4.7 資料匯出 "],["流程控制.html", "Chapter 5 流程控制 5.1 if -else 邏輯判斷 5.2 for 迴圈 5.3 while 迴圈 5.4 repeat 迴圈 5.5 break與next", " Chapter 5 流程控制 5.1 if -else 邏輯判斷 ifelse() ifelse是最簡單的邏輯判斷，寫法類似excel函數if函數，第一參數放判斷句，第二參數放判斷為真(TRUE)，會執行的程式碼，第三參數放判斷為假(FALSE)，會執行的程式碼 num &lt;- c(7,8,10,65,6,8,35,15,25,9,22) ifelse(num&gt;=10,&quot;&gt;=10&quot;,&quot;&lt;10&quot;) ## [1] &quot;&lt;10&quot; &quot;&lt;10&quot; &quot;&gt;=10&quot; &quot;&gt;=10&quot; &quot;&lt;10&quot; &quot;&lt;10&quot; &quot;&gt;=10&quot; &quot;&gt;=10&quot; &quot;&gt;=10&quot; &quot;&lt;10&quot; ## [11] &quot;&gt;=10&quot; if() 或 if()-else() 雖然ifelse很好用，但僅適用於單行邏輯判斷或執行，當預計執行程式碼較為複雜，無法用一行程式碼來執行，就必須考慮 使用if 及 else() if-else敘述使用在邏輯判斷，若需要依條件改變需要執行的程式碼，就會使用if-else，若if後所接邏輯判斷為真(TRUE)，就會執行if下方之程式碼，若為偽(FALSE)，則執行else下方之程式碼，若程式中沒有else片段，則不執行任何程式碼。 X =30 if(X&gt;=60){ print( &quot;及格&quot; ) }else{ print( &quot;不及格&quot;) } ## [1] &quot;不及格&quot; if- else if -else 當條件判斷是超過三個以上，中間條件判斷可以使用 else if 來判斷，最後一個則用else即可 X=sample(1:30,1) if(X %in% 3:5){ print(paste(&quot;X=&quot;,X,&quot;,春天&quot;)) }else if(X %in% 6:8){ print(paste (&quot;X=&quot;,X,&quot;夏天&quot;)) }else if(X %in% 9:11){ print(paste (&quot;X=&quot;,X,&quot;秋天&quot;)) }else if (X %in% c(1,2,12)){ print(paste(&quot;X=&quot;,X,&quot;冬天&quot;)) }else {print(paste (&quot;X=&quot;,X,&quot;請輸入1-12數字&quot;))} ## [1] &quot;X= 17 請輸入1-12數字&quot; 5.2 for 迴圈 for(i in c(&quot;蘋果&quot;,&quot;香蕉&quot;,&quot;西瓜&quot;)){ text &lt;- paste(&quot;這是&quot;,i ) print (text) } ## [1] &quot;這是 蘋果&quot; ## [1] &quot;這是 香蕉&quot; ## [1] &quot;這是 西瓜&quot; 5.3 while 迴圈 在R語言中，while迴圈用於在條件為真時重複執行一段程式碼。 while迴圈的基本語法結構如下，在每次迭代之前，R會檢查括號中的條件是否為真。如果為真，則執行迴圈內的程式碼；如果為假，則退出迴圈。 while (條件) { # 每次迭代要執行的程式碼 } 以下是一個使用while迴圈的範例，這段程式碼將輸出月份名稱： i &lt;- 1 while (i &lt;= 5) { print(month.name[i]) i &lt;- i + 1 } ## [1] &quot;January&quot; ## [1] &quot;February&quot; ## [1] &quot;March&quot; ## [1] &quot;April&quot; ## [1] &quot;May&quot; 5.4 repeat 迴圈 在R語言中，repeat迴圈用於重複執行一段程式碼，直到滿足特定的停止條件。這種迴圈的特點是沒有內建的條件來退出，必須使用break語句來明確地終止迴圈。 repeat { # 執行的程式碼 if (停止條件) { break } } 範例:打印數字直到達到特定值 # 展示如何使用repeat迴圈從1打印到5 x &lt;- 1 repeat { print(x) if (x &gt;= 5) { break } x &lt;- x + 1 } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 ## [1] 5 5.5 break與next 在 R 語言中，break 和 next 是用於控制迴圈流的兩個關鍵字。 break: 用於立即終止最內層的迴圈，不會影響外層的執行。 next: 跳過當前最內層迴圈的剩餘程式碼，直接進入下一次迭代。 範例: break # 使用 break 退出迴圈 for (i in 1:10) { if (i == 5) { break # 當 i 等於 5 時退出迴圈 } print(i) # 打印 i } ## [1] 1 ## [1] 2 ## [1] 3 ## [1] 4 範例: next # 使用 next 跳過某些值 for (i in 1:10) { if (i %% 2 == 0) { next # 當 i 是偶數時跳過這次迭代 } print(i) # 打印 i } ## [1] 1 ## [1] 3 ## [1] 5 ## [1] 7 ## [1] 9 "],["函數介紹.html", "Chapter 6 函數介紹 6.1 常用的內建函數 6.2 實用套件之函數 6.3 自訂函數 6.4 do.call 及call", " Chapter 6 函數介紹 6.1 常用的內建函數 6.2 實用套件之函數 6.3 自訂函數 在 R 語言中，自定義函數（Custom Functions）是用戶可以根據自己的需求編寫並使用的函數。這些函數可以執行任何你想要的任務，從簡單的計算到複雜的數據處理。以下是一個簡單的例子，說明如何創建和使用自定義函數。 自定義函數的基本結構 自定義函數的一般形式如下： function_name &lt;- function(arguments) { # 函數主體 # 這裡是函數要執行的代碼 return(value) } 範例1: 簡單加法函數 add_numbers &lt;- function(a, b) { sum &lt;- a + b return(sum) } #使用這個函數 result &lt;- add_numbers(3, 5) print(result) # 輸出：8 ## [1] 8 範例2: 計算圓的面積 calculate_area &lt;- function(radius) { area &lt;- pi * radius^2 return(area) } #使用這個函數 circle_area &lt;- calculate_area(4) print(circle_area) # 輸出：50.26548 ## [1] 50.26548 範例3: 處理數據框的函數 column_means &lt;- function(dataframe) { means &lt;- sapply(dataframe, mean, na.rm = TRUE) return(means) } # 創建示例數據框 data &lt;- data.frame( x = c(1, 2, 3, 4, 5), y = c(6, 7, 8, 9, 10), z = c(11, 12, 13, 14, 15) ) # 計算每列的平均值 means &lt;- column_means(data) print(means) # 輸出： x y z ## x y z ## 3 8 13 # 3 8 13 6.4 do.call 及call 6.4.1 1. do.call 基本用途 簡單的講，do.call 的功能就是執行一個函數，而這個函數的參數呢，放在一個list裡面, 是list的每個子元素，見下列範例: do.call的第一個參數(what)預備執行的函數名稱,第二個參數(args)放list格式包起來的資料及相關函數設定，如下列範例: vec1 &lt;- c(4,9,NA,8,12,74,36,NA,55) do.call(mean, list(vec1)) ##輸出NA，因為無設定第二個參數值 ## [1] NA do.call(mean, list(vec1,na.rm = TRUE)) ##排除遺失值後，計算平均值 ## [1] 28.28571 6.4.2 2. do.call 常運用於data.frame的子元素 dt &lt;- data.frame(&#39;letter&#39; = letters[1:10], &#39;number&#39; = 1:10, &#39;value&#39; = c(&#39;+&#39;,&#39;-&#39;)) dt[[1]] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; dt[[2]] ## [1] 1 2 3 4 5 6 7 8 9 10 dt[[3]] ## [1] &quot;+&quot; &quot;-&quot; &quot;+&quot; &quot;-&quot; &quot;+&quot; &quot;-&quot; &quot;+&quot; &quot;-&quot; &quot;+&quot; &quot;-&quot; do.call(paste0,dt) ## [1] &quot;a1+&quot; &quot;b2-&quot; &quot;c3+&quot; &quot;d4-&quot; &quot;e5+&quot; &quot;f6-&quot; &quot;g7+&quot; &quot;h8-&quot; &quot;i9+&quot; &quot;j10-&quot; 6.4.3 3. do.call 亦可運用於list 資料格式 一心營業額 = list(&quot;北區&quot;=data.frame(&quot;月份&quot;= c(7,8,9,10) ,&quot;銷售額&quot;=c(10000,27000,68500,34000)), &quot;中區&quot;=data.frame(&quot;月份&quot;= c(7,8,9,10) ,&quot;銷售額&quot;=c(9000,10400,59400,48000)), &quot;南區&quot;=data.frame(&quot;月份&quot;= c(7,8,9,10) ,&quot;銷售額&quot;=c(8000,96000,70400,63500))) do.call(rbind,一心營業額) ## 月份 銷售額 ## 北區.1 7 10000 ## 北區.2 8 27000 ## 北區.3 9 68500 ## 北區.4 10 34000 ## 中區.1 7 9000 ## 中區.2 8 10400 ## 中區.3 9 59400 ## 中區.4 10 48000 ## 南區.1 7 8000 ## 南區.2 8 96000 ## 南區.3 9 70400 ## 南區.4 10 63500 6.4.4 call 與 do.call的差異 call 和 do.call很像，兩者主要差異: do.call() 執行某個已知現存的函數，例如內建函數sum()、mean()等，需將參數以列表的形式傳遞給函數後，才能正常運作。 #自創一個能計算BMI的函數 BMI &lt;- function(ht, wt) { x &lt;- wt / (ht / 100)^2 return(x) } # 建立一個有身高及體重資料集 DT &lt;- data.frame(&quot;ht&quot; = c(155, 168, 159), &quot;wt&quot; = c(80, 60, 48)) # 使用 do.call 將列表作為參數傳遞給 BMI 函數 result &lt;- do.call(BMI, list(ht = DT$ht, wt = DT$wt)) # 印出結果 print(result) ## [1] 33.29865 21.25850 18.98659 call() 以動態的方式生成函數呼叫，再用eval函數執行呼叫 #自創一個能計算BMI的函數 BMI &lt;- function(ht, wt) { x &lt;- wt / (ht / 100)^2 return(x) } # 建立一個有身高及體重資料集 DT &lt;- data.frame(&quot;ht&quot; = c(155, 168, 159), &quot;wt&quot; = c(80, 60, 48)) # 使用call函數動態生成函數呼叫 my_call &lt;- call(&quot;BMI&quot;, ht = DT$ht, wt = DT$wt) # 以eval函數執行生成的函數呼叫 result &lt;- eval(my_call) # 印出結果 print(result) ## [1] 33.29865 21.25850 18.98659 由上面兩段程式碼可以看出來，call函數還需要搭配eval函數執行後續的呼叫，所以實務上，do.call往往更常被使用，而另一個快速調用函數的方法則是apply家族 6.4.5 1.線上資源 R do.call &amp; call 函数教程 R語言中eval和do.call的用法 R語言do.call 函數用法詳解 "],["基礎繪圖.html", "Chapter 7 基礎繪圖", " Chapter 7 基礎繪圖 "],["文字與時間處理.html", "Chapter 8 文字與時間處理 8.1 內建文字函數(base) 8.2 stringr套件 8.3 正則表達式", " Chapter 8 文字與時間處理 在R中，有需多內建的文字處理函數，可以對文字進行搜尋、取代、切割或擷取，除此之外，R在文字處理亦有一個套件 library(stringr)，可以彌補內建函數部分不足之處。 8.1 內建文字函數(base) 1. 大小寫切換 # 全部轉小寫之函數 tolower(&quot;HAPPLY DAY&quot;) ## [1] &quot;happly day&quot; # 全部轉大寫之函數 toupper(&quot;happly day&quot;) ## [1] &quot;HAPPLY DAY&quot; 2. 文字搜尋 # 找出符合條件的向量內位置 grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, fixed = FALSE, useBytes = FALSE, invert = FALSE) # 找出符合條件之邏輯判斷(TRUE FALSE) grepl(pattern, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 3. 文字取代 # 只替换第一次匹配的字串 sub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) # 替换所有匹配的字串 gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 4. 使用位址擷取 # 根據起始位址和結束位址，擷取出特定文字 substr(x, start, stop) # 根據起始位址和結束位址，擷取出特定文字，但結束位置可以向量化 substring(x, first, last) 5. 符合條件下之位址搜尋 # 找出符合條件的字串向量的起始位置 regexpr(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) # 找出符合條件的字串向量的起始位置,各自列表化 gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE) 與gregexpr類似的函數，還有regexec、gregexec，差異不大，只是輸出方式不同，筆者認為以後續處理方便性而言，gregexpr是比較值得學習的函數 8.2 stringr套件 library(stringr) # 首字母轉換成大寫字母 str_to_title(&quot;jack&quot;) #1.字串分割(可割多句) #輸出格式list str_split(string, pattern, n = Inf, simplify = FALSE) #2.字串分割(只割一句) str_split_1(string, pattern) #3.字串分割(指定割出多少詞) #輸出格式matrix str_split_fixed(string, pattern, n) #4.字串分割(指定割出後，輸出第i個字串) #輸出格式matrix str_split_i(string, pattern, i) fool= c(&quot;蘋果and橘子and香蕉and西瓜&quot;,&quot;豬肉and牛肉and雞肉&quot;) str_split_i(fool, &quot;and&quot;,3) #5.比對 (想找包含 西瓜 在內的字串) #類似 grepl str_detect(fool, pattern = &quot;西瓜&quot; ) grepl(&quot;西瓜&quot;, fool) 8.3 正則表達式 正則表達式（Regular Expressions）是一種用來匹配字串模式的工具，正規表達式有 . ^ $ * + ? \\ | []() {} 保留字元。正規表示式從左到右進行計算，並遵循優先順序，這與算術表達式非常類似。相同優先權的從左到右進行運算，不同優先權的運算先高後低，下表為相同優先權等級說明 運算符 說明 \\ 轉義符 ( )、[ ] 圓括號和方括號 *、+、?、{n}、{n,}、{n,m} 量詞限定符 ^、$ 、\\任何元字符 定位點和序位 | 替換、或 常見正則表達式，優先級別由高到低順序如下 優先順序 種類 說明 1 轉義符 \\是用於轉義其他特殊字元的轉義符號。它具有最高的優先權。 範例：\\d、\\. 等，其中 \\d 符合數字，\\. 符合點號。 2 括號 圓括號 () 用於建立子表達式，具有高於其他運算子的優先權。 範例：(abc)+ 符合 “abc” 一次或多次。 3 量詞 量詞指定前面的元素可以重複的次數。 範例：a*符合零個或多個 “a”。 4 字符類 使用方括號 [ ] 表示，用於匹配括號內的任意字元。 範例：[aeiou] 符合任何一個母音字母。 5 斷言 用於檢查字串中特定位置的條件的元素。 範例：^ 表示行的開頭，$ 表示行的結尾。 6 連接 沒有其他運算子的情況下表示字元之間的簡單連接。 範例：abc 匹配 “abc”。 7 管道 表示”或”，用於在多個模式之間選擇一個。 範例：cat|dog 符合 “cat” 或 “dog”。 常見正則表達式用法如下表，可分成五大類 分類 說明 匹配字元 .：匹配任意單個字元（除了換行符）。 \\\\d：匹配任意數字（相當於 [0-9]）。 \\\\D：匹配任意非數字字元。 \\\\w：匹配任意字母、數字或下劃線字元（相當於 [a-zA-Z0-9_]）。 \\\\W：匹配任意非字母、數字或下劃線字元。 \\\\s：匹配任意空白字元（空格、制表符、換行符等）。 \\\\S：匹配任意非空白字元。 匹配量詞 *：匹配前面的元素零次或多次。 +：匹配前面的元素一次或多次。 ?：匹配前面的元素零次或一次。 {n}：匹配前面的元素恰好 n 次。 {n,}：匹配前面的元素至少 n 次。 {n,m}：匹配前面的元素至少 n 次，但不超過 m 次。 錨點 ^：匹配字串的開頭。 $：匹配字串的結尾。 \\\\b：匹配一個單字邊界，指單詞間的空白位置(出現空字串(空白)開始或結束的位置)。 \\\\B：出現非字串開始或結束的位置，和\\\\b相反。 分組 (...)：將模式括起來，作為一個組。 |：表示“或”，例如 a|b 匹配 a 或 b 轉義字符 \\：正規表達式中用\\進行「轉義」，但R本身也用來\\來跳脫字符，所以使用正則表達式搜尋轉義字符時，需要兩個斜線\\\\。 \\\\n：換行符，將游標移到下一行的開頭 \\\\t：製表符，插入一個水平製表符，用於對齊文本(Tab鍵) \\\\r：回車符，將游標移到行首，不移到下一行 \\\\b：退格符 (backspace)，將游標移到前一個字符的位置，但不刪除該字符 \\\\f：換頁符。 \\\\\\：單一反斜線。 \\\\\"：雙引號。 \\\\'：單引號。 stringr套件總共提供30個字串處理函數，其中大部分皆可支援正規表示式應用，包內所有以str_開頭函數，後面單字用來說明該函數意義。 stringr套件中的函數在使用正則表達式時(例如str_detect)，與基本文字搜尋grep函數不同，可以匹配許多萬國字元，搭配[]使用，能夠比對多個特定字元，屬於字元集合，例如比對任意大寫字母可以用[A-Z]，或者[:upper:] ，下列整理 字元集合 說明(搭配萬國字元) 一般用法 [:digit:] 比對任何數字 [0-9] [:lower:] 比對任意小寫字母 [a-z] [:upper:] 比對任意大寫字母 [A-Z] [:alpha:] 比對任意字母 [a-zA-Z] [:alnum:] 比對任意字母和數字 [a-zA-Z0-9] [:blank:] 比對空格和定位字元 [ [:space:] 比對任意空白字元，包含空格、定位字元、換行字元（\\n）、換頁字元（\\f）、Enter字元（\\r) [ \\t\\n\\r\\f] [:punct:] 比對任意標點符號 - [:print:] 比對任意可印刷字元，等同任意字母和數字、標點符號、空白字元 [:cntrl:] 比對任意不可印刷字元，也稱為控制字元 "],["認識apply家族.html", "Chapter 9 認識apply家族 9.1 apply系列家族應用情境 9.2 apply用法 9.3 sapply/lapply用法 9.4 mapply用法", " Chapter 9 認識apply家族 apply家族主要功能是將所設定的函數應用到指定物件的每一個欄或列，基本使用格式如下: apply(x,MARGIN,FUN,...) x: 可以是矩陣(Matrix)、陣列(Array)、數據框(data.frame) MARGIN:1代表每一列,2代表每一欄 FUN: 預計使用的函數 . . . : FUN函數所需的額外參數，例如na.rm=TRUE 9.1 apply系列家族應用情境 函數名稱 特色 x的類型(輸入的資料結構) y的類型(輸出的資料結構) apply 接受矩陣輸入 行或列皆可處理 1:行;2:欄 矩陣(Matrix)、陣列(Array)、數據框(data.frame) 向量(Vector), Named numeric sapply lapply 只能處理欄，接受向量輸入 向量(Vector)、串列(List)、數據框(data.frame) sapply:向量(Vector) lapply:串列(List) mapply 同時處理多個向量、串列的輸入 向量(Vector)、串列(List)， SIMPLIFY = TRUE: 輸出向量 SIMPLIFY = FALSE: 輸出串列 tapply 有2個X輸入，其中一個X為factor輸入 x1: 通常是向量(Vector) x2: 因子(factor)，或分類的文字向量或因子串列 向量(Vector) 9.2 apply用法 1.apply函數，輸入Matrix資料結構，輸出numeric向量 # 輸入Matrix資料結構，輸出numeric向量 DT &lt;- matrix(c(8, 9, 6, 5, 7, 2, 10, 6, 8), ncol=3) colnames(DT) &lt;- c(&quot;獅子&quot;,&quot;斑馬&quot;,&quot;熊貓&quot;) rownames(DT) &lt;- c(&quot;Day 1&quot;, &quot;Day 2&quot;, &quot;Day 3&quot;) print(DT) Vec &lt;- apply(DT, 2, max) class(Vec) apply函數輸出如下 ## 獅子 斑馬 熊貓 ## Day 1 8 5 10 ## Day 2 9 7 6 ## Day 3 6 2 8 ## 獅子 斑馬 熊貓 ## 9 7 10 ## [1] &quot;numeric&quot; 2.apply函數，輸入data.frame資料結構，輸出numeric向量 # 輸入data.frame資料結構，輸出numeric向量 DT &lt;- data.frame(&quot;獅子&quot;=c(8,9,2),&quot;斑馬&quot;=c(5,7,2),&quot;熊貓&quot;=c(10,6,8)) print(DT) (Vec &lt;- apply(DT, 2, max)) class(Vec) apply函數輸出如下 ## 獅子 斑馬 熊貓 ## 1 8 5 10 ## 2 9 7 6 ## 3 2 2 8 ## 獅子 斑馬 熊貓 ## 9 7 10 ## [1] &quot;numeric&quot; 9.3 sapply/lapply用法 lapply 和 sapply 是 R 語言中常用的函數，兩者都是用來將一個函數應用到列表或向量的每個元素上，但它們在結果的返回形式上有所不同。以下是它們的主要差異及範例： lapply()總是返回一個list，不管輸入的複雜程度如何。 sapply()則嘗試簡化輸出結果，盡可能將其化簡為向量或矩陣。 1.lapply處理向量，輸出list # 使用 lapply 計算每個元素的平方 x &lt;- 1:5 # 定義一個數組向量 result &lt;- lapply(x, function(num) num^2) # 使用 lapply 計算每個元素的平方 print(result) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] 4 ## ## [[3]] ## [1] 9 ## ## [[4]] ## [1] 16 ## ## [[5]] ## [1] 25 2.lapply處理list，輸出list # 使用 lapply 計算每欄的總和 my_list &lt;- list(a = 1:5, b = 6:10, c = 11:15) result_lapply &lt;- lapply(my_list, sum) print(result_lapply) ## $a ## [1] 15 ## ## $b ## [1] 40 ## ## $c ## [1] 65 sapply處理向量，輸出向量 # 使用 sapply 計算每個元素的平方 x &lt;- 1:5 # 定義一個數組向量 result &lt;- sapply(x, function(num) num^2) # 使用 sapply 計算每個元素的平方 print(result) ## [1] 1 4 9 16 25 4.sapply處理list，輸出向量 # 使用 sapply 計算每欄的總和 my_list &lt;- list(a = 1:5, b = 6:10, c = 11:15) result_lapply &lt;- sapply(my_list, sum) print(result_lapply) ## a b c ## 15 40 65 9.4 mapply用法 mapply 專門用於同時處理多個向量或列表的函數。它的主要功能是對多個輸入進行逐元素的計算，類似於 sapply，但可以處理多個參數。 函數用法 mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE) FUN: 要應用的函數。 …: 一個或多個向量或列表。 MoreArgs: 附加的參數，傳遞給 FUN。 SIMPLIFY: 是否簡化輸出結果，預設為 TRUE。 USE.NAMES: 是否使用輸入的名稱作為輸出名稱。 範例1: 計算兩個向量的總和 vector1 &lt;- c(10, 20, 30) vector2 &lt;- c(1, 2, 3) total &lt;- mapply(sum, vector1, vector2) print(total) ## [1] 11 22 33 範例2: 用身高、性別和年齡來計算尖峰呼氣流速理想值 (PEFR) # 設定隨機種子以便重現 set.seed(123) # 步驟1: 創建資料集 DT DT &lt;- data.frame(Gender = sample(c(0, 1), size = 30, replace = TRUE), # 性別變數 (0: 女性, 1: 男性), Height = sample(150:190, size = 30, replace = TRUE), # 身高變數 (cm), Age = sample(20:50, size = 30, replace = TRUE)) # 年齡變數 (20-50歲)) # 步驟2: 定義 PEFR 函數 PEFR &lt;- function(gender, height, age) { if (gender == 1) { # 男性 return(3.89 * height - 2.95 * age + 43.59) } else { # 女性 return(4.10 * height - 1.61 * age - 173.55) } } # 步驟3: 使用 mapply 計算 PEFR 預測值並新增到 DT DT$PEFR_Predicted &lt;- mapply(PEFR, DT$Gender, DT$Height, DT$Age) # 顯示更新後的資料集 head(DT) ## Gender Height Age PEFR_Predicted ## 1 0 158 25 434.00 ## 2 0 168 40 450.85 ## 3 0 185 34 530.21 ## 4 1 163 28 595.06 ## 5 0 166 34 452.31 ## 6 1 188 45 642.16 "],["dplyr及-tidyr運用.html", "Chapter 10 dplyr及 tidyr運用", " Chapter 10 dplyr及 tidyr運用 "],["data.html", "Chapter 11 data.table運用", " Chapter 11 data.table運用 "],["ggplot2繪圖.html", "Chapter 12 ggplot2繪圖", " Chapter 12 ggplot2繪圖 "]]
