[["初級r--認識apply家族.html", "Chapter 8 初級R- 認識apply家族 8.1 apply系列家族應用情境 8.2 apply用法 8.3 sapply/lapply用法 8.4 mapply用法", " Chapter 8 初級R- 認識apply家族 apply家族主要功能是將所設定的函數應用到指定物件的每一個欄或列，基本使用格式如下: apply(x,MARGIN,FUN,...) x: 可以是矩陣(Matrix)、陣列(Array)、數據框(data.frame) MARGIN:1代表每一列,2代表每一欄 FUN: 預計使用的函數 . . . : FUN函數所需的額外參數，例如na.rm=TRUE 8.1 apply系列家族應用情境 函數名稱 特色 x的類型(輸入的資料結構) y的類型(輸出的資料結構) apply 接受矩陣輸入 行或列皆可處理 1:行;2:欄 矩陣(Matrix)、陣列(Array)、數據框(data.frame) 向量(Vector), Named numeric sapply lapply 只能處理欄，接受向量輸入 向量(Vector)、串列(List)、數據框(data.frame) sapply:向量(Vector) lapply:串列(List) mapply 同時處理多個向量、串列的輸入 向量(Vector)、串列(List)， SIMPLIFY = TRUE: 輸出向量 SIMPLIFY = FALSE: 輸出串列 tapply 有2個X輸入，其中一個X為factor輸入 x1: 通常是向量(Vector) x2: 因子(factor)，或分類的文字向量或因子串列 向量(Vector) 8.2 apply用法 1.apply函數，輸入Matrix資料結構，輸出numeric向量 # 輸入Matrix資料結構，輸出numeric向量 DT &lt;- matrix(c(8, 9, 6, 5, 7, 2, 10, 6, 8), ncol=3) colnames(DT) &lt;- c(&quot;獅子&quot;,&quot;斑馬&quot;,&quot;熊貓&quot;) rownames(DT) &lt;- c(&quot;Day 1&quot;, &quot;Day 2&quot;, &quot;Day 3&quot;) print(DT) Vec &lt;- apply(DT, 2, max) class(Vec) apply函數輸出如下 ## 獅子 斑馬 熊貓 ## Day 1 8 5 10 ## Day 2 9 7 6 ## Day 3 6 2 8 ## 獅子 斑馬 熊貓 ## 9 7 10 ## [1] &quot;numeric&quot; 2.apply函數，輸入data.frame資料結構，輸出numeric向量 # 輸入data.frame資料結構，輸出numeric向量 DT &lt;- data.frame(&quot;獅子&quot;=c(8,9,2),&quot;斑馬&quot;=c(5,7,2),&quot;熊貓&quot;=c(10,6,8)) print(DT) (Vec &lt;- apply(DT, 2, max)) class(Vec) apply函數輸出如下 ## 獅子 斑馬 熊貓 ## 1 8 5 10 ## 2 9 7 6 ## 3 2 2 8 ## 獅子 斑馬 熊貓 ## 9 7 10 ## [1] &quot;numeric&quot; 8.3 sapply/lapply用法 lapply 和 sapply 是 R 語言中常用的函數，兩者都是用來將一個函數應用到列表或向量的每個元素上，但它們在結果的返回形式上有所不同。以下是它們的主要差異及範例： lapply()總是返回一個list，不管輸入的複雜程度如何。 sapply()則嘗試簡化輸出結果，盡可能將其化簡為向量或矩陣。 1.lapply處理向量，輸出list # 使用 lapply 計算每個元素的平方 x &lt;- 1:5 # 定義一個數組向量 result &lt;- lapply(x, function(num) num^2) # 使用 lapply 計算每個元素的平方 print(result) ## [[1]] ## [1] 1 ## ## [[2]] ## [1] 4 ## ## [[3]] ## [1] 9 ## ## [[4]] ## [1] 16 ## ## [[5]] ## [1] 25 2.lapply處理list，輸出list # 使用 lapply 計算每欄的總和 my_list &lt;- list(a = 1:5, b = 6:10, c = 11:15) result_lapply &lt;- lapply(my_list, sum) print(result_lapply) ## $a ## [1] 15 ## ## $b ## [1] 40 ## ## $c ## [1] 65 sapply處理向量，輸出向量 # 使用 sapply 計算每個元素的平方 x &lt;- 1:5 # 定義一個數組向量 result &lt;- sapply(x, function(num) num^2) # 使用 sapply 計算每個元素的平方 print(result) ## [1] 1 4 9 16 25 4.sapply處理list，輸出向量 # 使用 sapply 計算每欄的總和 my_list &lt;- list(a = 1:5, b = 6:10, c = 11:15) result_lapply &lt;- sapply(my_list, sum) print(result_lapply) ## a b c ## 15 40 65 8.4 mapply用法 mapply 專門用於同時處理多個向量或列表的函數。它的主要功能是對多個輸入進行逐元素的計算，類似於 sapply，但可以處理多個參數。 函數用法 mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE) FUN: 要應用的函數。 …: 一個或多個向量或列表。 MoreArgs: 附加的參數，傳遞給 FUN。 SIMPLIFY: 是否簡化輸出結果，預設為 TRUE。 USE.NAMES: 是否使用輸入的名稱作為輸出名稱。 範例1: 計算兩個向量的總和 vector1 &lt;- c(10, 20, 30) vector2 &lt;- c(1, 2, 3) total &lt;- mapply(sum, vector1, vector2) print(total) ## [1] 11 22 33 範例2: 用身高、性別和年齡來計算尖峰呼氣流速理想值 (PEFR) # 設定隨機種子以便重現 set.seed(123) # 步驟1: 創建資料集 DT DT &lt;- data.frame(Gender = sample(c(0, 1), size = 30, replace = TRUE), # 性別變數 (0: 女性, 1: 男性), Height = sample(150:190, size = 30, replace = TRUE), # 身高變數 (cm), Age = sample(20:50, size = 30, replace = TRUE)) # 年齡變數 (20-50歲)) # 步驟2: 定義 PEFR 函數 PEFR &lt;- function(gender, height, age) { if (gender == 1) { # 男性 return(3.89 * height - 2.95 * age + 43.59) } else { # 女性 return(4.10 * height - 1.61 * age - 173.55) } } # 步驟3: 使用 mapply 計算 PEFR 預測值並新增到 DT DT$PEFR_Predicted &lt;- mapply(PEFR, DT$Gender, DT$Height, DT$Age) # 顯示更新後的資料集 head(DT) ## Gender Height Age PEFR_Predicted ## 1 0 158 25 434.00 ## 2 0 168 40 450.85 ## 3 0 185 34 530.21 ## 4 1 163 28 595.06 ## 5 0 166 34 452.31 ## 6 1 188 45 642.16 "]]
